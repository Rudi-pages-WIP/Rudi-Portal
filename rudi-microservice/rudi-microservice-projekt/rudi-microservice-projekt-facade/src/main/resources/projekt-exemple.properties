# Surcharger les paramètres de "genius.properties"
server.port=8089

# Configuration BDD 
spring.datasource.url=jdbc:postgresql://localhost:5432/rudi
spring.datasource.username=...
spring.datasource.password=...
spring.jpa.show-sql=true

# Génération du script par hibernate + jpa
spring.flyway.enabled=true
spring.jpa.hibernate.ddl-auto=none
# Décommenter les lignes suivantes pour générer le fichier create_all_tables.sql à partir de toutes les @Entity du projet
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=../rudi-microservice-projekt-service/src/main/resources/bdd/create_all_tables.sql
#spring.jpa.properties.hibernate.hbm2ddl.delimiter=;

eureka.client.serviceURL.defaultZone=http://...:...@localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

eureka.instance.instance-id=${spring.application.name}:${random.uuid}
eureka.instance.hostname=localhost

security.jwt.access.tokenKey=...

# Rudi OAuth2
module.oauth2.provider-uri=http://localhost:8085/oauth/token
module.oauth2.client-id=...
module.oauth2.client-secret=...
module.oauth2.scope=read,write
module.oauth2.check-token-uri=http://localhost:8085/oauth/check_token

# dataverse
dataverse.api.url=http://...:${dataverse.instance1.port}/api
dataverse.api.token=...
# dataverse Rudi Media
dataverse.api.rudi.media.data.alias=rudi_media_data
dataverse.api.rudi.data.alias=rudi_data
dataverse.api.rudi.archive.alias=rudi_archive

mail.smtp.host=ren1vml0158
mail.smtp.port=1025
email.urlServer=http://localhost:4200

# Conf locale de surcharge des templates de mail pour les devs (un repertoire quelque part sur la machine)
# bien mettre les mail dans un dossier "templates/lemail.txt"
freemarker.baseDirectory=/opt/rudi_tmp

## Configuration API Manager
##########################
apimanager.base-url=https://wso2.open-dev.com
apimanager.api.url=https://wso2.open-dev.com:9443/api/am
apimanager.api.admin.context=/admin/v1
apimanager.api.publisher.context=/publisher/v1
apimanager.api.store.context=/store/v1
apimanager.api.store.api.categories=RudiData
apimanager.api.store.application.default.name=rudi_application
apimanager.api.store.application.default.requestPolicy=Unlimited
apimanager.api.store.subscription.default.policy=Unlimited
apimanager.api.store.subscription.anonymous.policy=Bronze
apimanager.gateway.url=https://wso2.open-dev.com:8243
apimanager.oauth2.client.admin.username=admin
apimanager.oauth2.client.admin.password=admin
apimanager.oauth2.client.anonymous.username=anonymous
apimanager.oauth2.client.anonymous.password=anonymous
apimanager.oauth2.client.rudi.username=rudi
apimanager.oauth2.client.rudi.password=rudi@123
apimanager.oauth2.client.default.registration.scopes=apim:subscribe,apim:api_view,apim:api_create,apim:api_publish,apim:api_delete
apimanager.oauth2.client.provider.token-uri=https://wso2.open-dev.com:9443/oauth2/token
# paramètres d'authentification OAuth2 des users vers WSO2
apimanager.oauth2.client.admin.registration.client-id=lYIEBuZiVjPDcvbJzKgFHQPmJk8a
apimanager.oauth2.client.admin.registration.client-secret=zDeef8__2r058SRgoHMrveenQc0a
apimanager.oauth2.client.admin.registration.id=rest_api_admin
apimanager.oauth2.client.admin.registration.scopes=apim:admin

# Conditionner le cache WSO2 à utiliser
apimanager.oauth2.client.registration.internal=false